{"ast":null,"code":"var _jsxFileName = \"/Users/joey/Desktop/etf-holdings-site/src/App.js\";\n// import React, { useState } from \"react\";\n// import styled from 'styled-components';\n// import TextField from '@material-ui/core/TextField';\n// import { makeStyles } from '@material-ui/core/styles';\n// import InputLabel from '@material-ui/core/InputLabel';\n// import MenuItem from '@material-ui/core/MenuItem';\n// import FormHelperText from '@material-ui/core/FormHelperText';\n// import FormControl from '@material-ui/core/FormControl';\n// import Select from '@material-ui/core/Select';\n// import { FlexBox } from \"react-styled-flex\";\n// import { DataGrid } from '@mui/x-data-grid';\n// import Button from '@material-ui/core/Button';\n// import {Inputs,ButtonStyle,IDK, FlexItem,LastText, Title,TotalButton,ErrorLabel} from './StyledComponents.js';\n// const axios = require('axios');\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     '& > *': {\n//       margin: theme.spacing(1),\n//       width: '25ch',\n//     },\n//   },\n//   formControl: {\n//     margin: theme.spacing(1),\n//     minWidth: 120,\n//   },\n//   selectEmpty: {\n//     marginTop: theme.spacing(2),\n//   },\n// }));\n// function App(props) {\n// \tconst [rows, setRows] = React.useState()\n// \tconst [etfStockType, setEtfStockType] = React.useState('ETF');\n// \tconst [unit, setUnit] = React.useState('Shares');\n// \tconst [isValidStockTicker, setIsValidStockTicker] = useState(true);\n// \tconst [isValidETFTicker, setIsValidETFTicker] = useState(true);\n// \tasync function sendGetRequest(etfValues, etfShares, stockValues, stockShares){\n// \t\tlet stocks = {};\n// \t\tlet etfs = [];\n// \t\tlet individualStocks=[];\n// \t\tlet totalOverallValue=0;\n// \t\tfor (let i=0; i<etfValues.length;i++){\n// \t\t\tetfs.push({\"etf\": etfValues[i][\"ticker\"], \"value\": etfValues[i][\"value\"]});\n// \t\t\ttotalOverallValue+=etfValues[i][\"value\"];\n// \t\t}\n// \t\tfor (let i=0; i<etfShares.length;i++){\n// \t\t\tawait axios.get(`https://financialmodelingprep.com/api/v3/quote-short/${etfShares[i][\"ticker\"]}?apikey=1a4f4c0ce5cd348fb5a01d33d0e1195a`)\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"H\");\n// \t\t\t\tetfs.push({\"etf\": etfShares[i][\"ticker\"], \"value\": etfShares[i][\"shares\"]*response.data[0][\"price\"]});\n// \t\t\t\ttotalOverallValue+=etfShares[i][\"shares\"]*response.data[0][\"price\"];\n// \t\t\t})\n// \t\t\t.catch(function (error){\n// \t\t\t\tsetIsValidETFTicker(false);\n// \t\t\t});;\n// \t\t}\n// \t\t//now we have [{etf:SPY, value: 200}, {etf:SPY, value: 300}]\n// \t\tfor (let i=0;i<stockValues.length;i++){\n// \t\t\tindividualStocks.push({\"stock\": stockValues[i][\"ticker\"], \"value\":stockValues[i][\"value\"]});\n// \t\t\ttotalOverallValue+=stockValues[i][\"value\"];\n// \t\t}\n// \t\tfor (let i=0;i<stockShares.length;i++){\n// \t\t\tawait axios.get(`https://financialmodelingprep.com/api/v3/quote-short/${stockShares[i][\"ticker\"]}?apikey=1a4f4c0ce5cd348fb5a01d33d0e1195a`)\n// \t\t\t\t.then((response) => {\n// \t\t\t\t\tindividualStocks.push({\"stock\": stockShares[i][\"ticker\"], \"value\": stockShares[i][\"shares\"]*response.data[0][\"price\"]});\n// \t\t\t\t\ttotalOverallValue+=stockShares[i][\"shares\"]*response.data[0][\"price\"];\n// \t\t\t\t})\n// \t\t\t\t.catch(function (error){\n// \t\t\t\t\tsetIsValidStockTicker(false);\n// \t\t\t\t});\n// \t\t}\n// \t\tconsole.log(totalOverallValue);\n// \t\t//now we have [{stock:AAPL, value 50}, {stock:MSFT, value 50}]\n// \t\tfor(let i=0 ;i<etfs.length;i++){\n// \t\t\tawait axios.get(`https://fmpcloud.io/api/v3/etf-holder/${etfs[i][\"etf\"]}?apikey=863b5080b597b86a6bfab2088844d00a`)\n// \t\t\t.then((response) => {\n// \t\t\t\tfor (let j=0;j<response.data.length;j++){\n// \t\t\t\t\tstocks[response.data[j][\"asset\"]] = stocks[response.data[j][\"asset\"]] ? [((response.data[j][\"weightPercentage\"]/100)*etfs[i][\"value\"])/totalOverallValue + stocks[response.data[j][\"asset\"]],(((response.data[j][\"weightPercentage\"]/100)*etfs[i][\"value\"])/totalOverallValue + stocks[response.data[j][\"asset\"]])*totalOverallValue] : [((response.data[j][\"weightPercentage\"]/100)*etfs[i][\"value\"])/totalOverallValue,(((response.data[j][\"weightPercentage\"]/100)*etfs[i][\"value\"])/totalOverallValue)*totalOverallValue];\n// \t\t\t\t}\n// \t\t\t})\n// \t\t\t.catch(function (error){\n// \t\t\t\tsetIsValidETFTicker(false);\n// \t\t\t});;       \n// \t\t}\n// \t\tfor (let i=0;i<individualStocks.length;i++){\n// \t\t\tstocks[individualStocks[i][\"stock\"]] = stocks[individualStocks[i][\"stock\"]] ? [individualStocks[i][\"value\"]/totalOverallValue + stocks[individualStocks[i][\"stock\"]],(individualStocks[i][\"value\"]/totalOverallValue + stocks[individualStocks[i][\"stock\"]])*totalOverallValue]: [individualStocks[i][\"value\"]/totalOverallValue,(individualStocks[i][\"value\"]/totalOverallValue)*totalOverallValue];\n// \t\t}\n// \t\tconsole.log(stocks)\n// \t\treturn stocks;\n// \t};\n// \tconst [formValues, setFormValues] = useState([{ \"type\": \"ETF\", \"ETFStock\" : \"\", \"value\":\"Shares\", \"ValueShare\":\"\"}])\n// \tfunction createData(id,ticker, percent, totalVal) {\n// \t\treturn {\n// \t\t  id,\n// \t\t  ticker,\n// \t\t  percent,\n// \t\t  totalVal,\n// \t\t};\n// \t  }\n//     let handleChange = (i, e) => {\n//         let newFormValues = [...formValues];\n//         newFormValues[i][e.target.name] = e.target.value;\n// \t\tsetFormValues(newFormValues);\n// \t\t// setEtfStockType(newFormValues[i][\"type\"]);\n// \t\t// setUnit(newFormValues[i][\"value\"])\n// \t  }\n//     let addFormFields = () => {\n// \t\tsetFormValues([...formValues, { \"type\": \"ETF\", \"ETFStock\" : \"\", \"value\":\"Shares\", \"ValueShare\":\"\"}])\n// \t\tsetIsNumber(true);\n// \t\tsetIsValidStockTicker(true);\n// \t\tsetIsValidETFTicker(true);\n// \t\tsetEmpty(false);\n//       }\n//     let removeFormFields = (i) => {\n//         let newFormValues = [...formValues];\n//         newFormValues.splice(i, 1);\n//         setFormValues(newFormValues)\n// \t}\n// \tfunction isNumeric(value) {\n// \t\treturn /^-?\\d+$/.test(value);\n// \t}\n// \tconst [triedSubmit, setTriedSubmit] = useState(false);\n// \tconst [empty, setEmpty] = useState(false);\n// \tconst [isNumber, setIsNumber] = useState(true);\n//     let handleSubmit = (event) => {\n// \t\tsetIsNumber(true);\n// \t\tsetIsValidStockTicker(true);\n// \t\tsetIsValidETFTicker(true);\n// \t\tsetEmpty(false);\n// \t\tevent.preventDefault();\n// \t\tsetTriedSubmit(true);\n// \t\tlet getOut=false;\n// \t\tformValues.forEach(function (item, index) {\n// \t\t\tconsole.log(typeof(item[\"ValueShare\"]))\n// \t\t\tif(item[\"ETFStock\"]===\"\" || item[\"ValueShare\"]===\"\"){\n// \t\t\t\tsetEmpty(true);\n// \t\t\t\tgetOut=true;\n// \t\t\t\treturn;\n// \t\t\t}\n// \t\t\tif(isNumeric(item[\"ValueShare\"])===false){\n// \t\t\t\tconsole.log(\"e\")\n// \t\t\t\tsetIsNumber(false);\n// \t\t\t\tgetOut=true;\n// \t\t\t\treturn;\n// \t\t\t}\n// \t\t});\n// \t\tif(getOut===false){\n// \t\t\tlet etfShares=[];\n// \t\t\tlet etfValues=[];\n// \t\t\tlet stockShares=[];\n// \t\t\tlet stockValues=[];\n// \t\t\tfor (let i=0;i<formValues.length;i++){\n// \t\t\t\tif(formValues[i][\"type\"]===\"ETF\" && formValues[i][\"value\"]===\"Shares\"){\n// \t\t\t\t\tetfShares.push({\"ticker\":formValues[i][\"ETFStock\"], \"shares\":parseFloat(formValues[i][\"ValueShare\"])});\n// \t\t\t\t}\n// \t\t\t\telse if(formValues[i][\"type\"]===\"ETF\" && formValues[i][\"value\"]===\"$ Value\"){\n// \t\t\t\t\tetfValues.push({\"ticker\":formValues[i][\"ETFStock\"], \"value\":parseFloat(formValues[i][\"ValueShare\"])});\n// \t\t\t\t}\n// \t\t\t\telse if(formValues[i][\"type\"]===\"Stock\" && formValues[i][\"value\"]===\"Shares\"){\n// \t\t\t\t\tstockShares.push({\"ticker\":formValues[i][\"ETFStock\"], \"shares\":parseFloat(formValues[i][\"ValueShare\"])});\n// \t\t\t\t}\n// \t\t\t\telse if(formValues[i][\"type\"]===\"Stock\" && formValues[i][\"value\"]===\"$ Value\"){\n// \t\t\t\t\tstockValues.push({\"ticker\":formValues[i][\"ETFStock\"], \"value\":parseFloat(formValues[i][\"ValueShare\"])});\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\tlet percentages = sendGetRequest(etfValues, etfShares, stockValues, stockShares);\n// \t\t\tpercentages.then(function(result) {\n// \t\t\t\tconsole.log(result);\n// \t\t\t\tlet entries = Object.entries(result);\n// \t\t\t\tlet sorted = entries.sort((a, b) => b[1] - a[1]);\n// \t\t\t\tlet newRows=[];\n// \t\t\t\tfor (let i=0;i<sorted.length;i++){\n// \t\t\t\t\tnewRows.push(createData(i,sorted[i][0], sorted[i][1][0],sorted[i][1][1]))\n// \t\t\t\t}\n// \t\t\t\tsetRows(newRows);\n// \t\t\t\tconsole.log(rows)\n// \t\t\t})\n// \t\t}\n//     }\n// \tconst classes = useStyles();\n// \tconst columns = [\n// \t\t{field: \"ticker\", headerName: \"Stock\", width:100},\n// \t\t{field: \"percentage\", headerName: \"Percent of Portfolio\", width: 200},\n// \t\t{filed: \"totalVal\", headerName: \"$ Value\", width:150}\n// \t]\n// \treturn (\n// \t\t<div>\n// \t\t\t<Title>ETF Holdings</Title>\n// \t\t<IDK>\n// \t\t<form  className={classes.root} onSubmit={handleSubmit}>\n//           {formValues.map((element, index) => (\n//             <div className=\"form-inline\" key={index}>\n// \t\t\t<FlexBox justifyContent=\"center\" alignItems=\"center\">\n// \t\t\t<FlexItem>\n// \t\t\t<FormControl className={classes.formControl}>\n// \t\t\t\t<InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n// \t\t\t\t\tETF or Stock\n// \t\t\t\t</InputLabel>\n// \t\t\t\t\t<Select name=\"type\" onChange={e => handleChange(index, e)} labelId=\"demo-simple-select-placeholder-label-label\"\n// \t\t\tid=\"demo-simple-select-placeholder-label\" displayEmpty className={classes.selectEmpty} value={formValues[index][\"type\"]}>\n// \t\t\t\t\t<MenuItem value=\"ETF\">ETF</MenuItem>\n// \t\t\t\t\t<MenuItem value =\"Stock\">Stock</MenuItem>\n// \t\t\t\t\t</Select>\n// \t\t\t</FormControl>\n//             </FlexItem>\n// \t\t\t<FlexItem>\n//               <TextField style = {{width: 150}}  id=\"outlined-basic\" variant =\"outlined\" type=\"text\" name=\"ETFStock\" value={element.ETFStock || \"\"} onChange={e => handleChange(index, e)} />\n// \t\t\t  </FlexItem>\n// \t\t\t<FlexItem>\n// \t\t\t  <FormControl className={classes.formControl}>\n// \t\t\t<InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n// \t\t\t\tUnit\n// \t\t\t</InputLabel>\n// \t\t\t\t<Select name=\"value\" onChange={e => handleChange(index, e)} labelId=\"demo-simple-select-placeholder-label-label\"\n//           id=\"demo-simple-select-placeholder-label\" displayEmpty className={classes.selectEmpty} value={formValues[index][\"value\"]}>\n// \t\t\t\t<MenuItem value=\"Shares\">Shares</MenuItem>\n// \t\t\t\t<MenuItem value =\"$ Value\">$ Value</MenuItem>\n// \t\t\t\t</Select>\n// \t\t\t</FormControl>\n// \t\t\t</FlexItem>\n// \t\t\t<FlexItem>\n// \t\t\t\t<LastText>\n// \t\t\t\t<TextField style = {{width: 150}} id=\"outlined-basic\" variant =\"outlined\" type=\"text\" name=\"ValueShare\" value={element.ValueShare || \"\"} onChange={e => handleChange(index, e)} />\n// \t\t\t\t</LastText>\n// \t\t\t\t</FlexItem>\n// \t\t\t  {\n// \t\t\t\tindex>0 ? \n// \t\t\t\t<FlexItem>\n// \t\t\t\t<Button variant=\"contained\" type=\"button\"  className=\"button remove\" onClick={() => removeFormFields(index)}>Remove</Button>\n//                 </FlexItem>\n// \t\t\t\t: <FlexItem><Button variant=\"contained\" disabled type=\"button\"  className=\"button remove\" onClick={() => removeFormFields(index)}>Remove</Button></FlexItem>\n//               }\n// \t\t\t  </FlexBox>\n//             </div>\n//           ))}\n// \t\t  {triedSubmit && empty? <ErrorLabel>All inputs must be filled</ErrorLabel>:  triedSubmit && isNumber===false ? <ErrorLabel>Value input must be a valid number</ErrorLabel>: triedSubmit && isValidStockTicker===false? <ErrorLabel>Ensure that it is a valid stock ticker!</ErrorLabel>:triedSubmit && isValidETFTicker===false?<ErrorLabel>Ensure that it is a valid ETF!</ErrorLabel>:\"\"}\n// \t\t  <div className=\"button-section\">\n// \t\t\t  <TotalButton>\n// \t\t\t  <ButtonStyle>\n// \t\t\t<Button style = {{width: 120}, {height:45}}  variant=\"contained\" color=\"primary\" className=\"button add\" type=\"button\" onClick={() => addFormFields()}>\n// \t\t\t\tAdd\n// \t\t\t</Button>\n// \t\t\t</ButtonStyle>\n// \t\t\t<Button style = {{width: 120}, {height:45}}  variant=\"contained\" color=\"primary\" className=\"button submit\" type=\"submit\">\n// \t\t\t\tSubmit\n// \t\t\t</Button>\n// \t\t\t</TotalButton>\n//           </div>\n//       </form>\n// \t  </IDK>\n// \t  <div style={{ height: 400, width: '50%' }}>\n//       <DataGrid\n//         rows={rows}\n//         columns={columns}\n//         pageSize={5}\n// \t\trowsPerPageOptions={[5]}\n//       />\n//     </div>\t\n// \t  </div>\n//   \t);\n// }\t\t\n// export default App;\nimport * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: 'id',\n  headerName: 'ID',\n  width: 70\n}, {\n  field: 'firstName',\n  headerName: 'First name',\n  width: 130\n}, {\n  field: 'lastName',\n  headerName: 'Last name',\n  width: 130\n}, {\n  field: 'age',\n  headerName: 'Age',\n  type: 'number',\n  width: 90\n}, {\n  field: 'fullName',\n  headerName: 'Full name',\n  description: 'This column has a value getter and is not sortable.',\n  sortable: false,\n  width: 160,\n  valueGetter: params => `${params.row.firstName || ''} ${params.row.lastName || ''}`\n}];\nconst rows = [{\n  id: 1,\n  lastName: 'Snow',\n  firstName: 'Jon',\n  age: 35\n}, {\n  id: 2,\n  lastName: 'Lannister',\n  firstName: 'Cersei',\n  age: 42\n}, {\n  id: 3,\n  lastName: 'Lannister',\n  firstName: 'Jaime',\n  age: 45\n}, {\n  id: 4,\n  lastName: 'Stark',\n  firstName: 'Arya',\n  age: 16\n}, {\n  id: 5,\n  lastName: 'Targaryen',\n  firstName: 'Daenerys',\n  age: null\n}, {\n  id: 6,\n  lastName: 'Melisandre',\n  firstName: null,\n  age: 150\n}, {\n  id: 7,\n  lastName: 'Clifford',\n  firstName: 'Ferrara',\n  age: 44\n}, {\n  id: 8,\n  lastName: 'Frances',\n  firstName: 'Rossini',\n  age: 36\n}, {\n  id: 9,\n  lastName: 'Roxie',\n  firstName: 'Harvey',\n  age: 65\n}];\nexport default function DataTable() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 400,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      pageSize: 5,\n      rowsPerPageOptions: [5],\n      checkboxSelection: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 5\n  }, this);\n}\n_c = DataTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"sources":["/Users/joey/Desktop/etf-holdings-site/src/App.js"],"names":["React","DataGrid","columns","field","headerName","width","type","description","sortable","valueGetter","params","row","firstName","lastName","rows","id","age","DataTable","height"],"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","sourcesContent":["// import React, { useState } from \"react\";\n// import styled from 'styled-components';\n// import TextField from '@material-ui/core/TextField';\n// import { makeStyles } from '@material-ui/core/styles';\n// import InputLabel from '@material-ui/core/InputLabel';\n// import MenuItem from '@material-ui/core/MenuItem';\n// import FormHelperText from '@material-ui/core/FormHelperText';\n// import FormControl from '@material-ui/core/FormControl';\n// import Select from '@material-ui/core/Select';\n// import { FlexBox } from \"react-styled-flex\";\n// import { DataGrid } from '@mui/x-data-grid';\n\n// import Button from '@material-ui/core/Button';\n\n// import {Inputs,ButtonStyle,IDK, FlexItem,LastText, Title,TotalButton,ErrorLabel} from './StyledComponents.js';\n\n// const axios = require('axios');\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     '& > *': {\n//       margin: theme.spacing(1),\n//       width: '25ch',\n//     },\n//   },\n//   formControl: {\n//     margin: theme.spacing(1),\n//     minWidth: 120,\n//   },\n//   selectEmpty: {\n//     marginTop: theme.spacing(2),\n//   },\n// }));\n  \n\n// function App(props) {\n// \tconst [rows, setRows] = React.useState()\n// \tconst [etfStockType, setEtfStockType] = React.useState('ETF');\n// \tconst [unit, setUnit] = React.useState('Shares');\n// \tconst [isValidStockTicker, setIsValidStockTicker] = useState(true);\n// \tconst [isValidETFTicker, setIsValidETFTicker] = useState(true);\n\n// \tasync function sendGetRequest(etfValues, etfShares, stockValues, stockShares){\n// \t\tlet stocks = {};\n// \t\tlet etfs = [];\n// \t\tlet individualStocks=[];\n// \t\tlet totalOverallValue=0;\n// \t\tfor (let i=0; i<etfValues.length;i++){\n// \t\t\tetfs.push({\"etf\": etfValues[i][\"ticker\"], \"value\": etfValues[i][\"value\"]});\n// \t\t\ttotalOverallValue+=etfValues[i][\"value\"];\n// \t\t}\n// \t\tfor (let i=0; i<etfShares.length;i++){\n// \t\t\tawait axios.get(`https://financialmodelingprep.com/api/v3/quote-short/${etfShares[i][\"ticker\"]}?apikey=1a4f4c0ce5cd348fb5a01d33d0e1195a`)\n// \t\t\t.then((response) => {\n// \t\t\t\tconsole.log(\"H\");\n// \t\t\t\tetfs.push({\"etf\": etfShares[i][\"ticker\"], \"value\": etfShares[i][\"shares\"]*response.data[0][\"price\"]});\n// \t\t\t\ttotalOverallValue+=etfShares[i][\"shares\"]*response.data[0][\"price\"];\n// \t\t\t})\n// \t\t\t.catch(function (error){\n// \t\t\t\tsetIsValidETFTicker(false);\n// \t\t\t});;\n// \t\t}\n\n// \t\t//now we have [{etf:SPY, value: 200}, {etf:SPY, value: 300}]\n// \t\tfor (let i=0;i<stockValues.length;i++){\n// \t\t\tindividualStocks.push({\"stock\": stockValues[i][\"ticker\"], \"value\":stockValues[i][\"value\"]});\n// \t\t\ttotalOverallValue+=stockValues[i][\"value\"];\n// \t\t}\n\t\t\n\n// \t\tfor (let i=0;i<stockShares.length;i++){\n// \t\t\tawait axios.get(`https://financialmodelingprep.com/api/v3/quote-short/${stockShares[i][\"ticker\"]}?apikey=1a4f4c0ce5cd348fb5a01d33d0e1195a`)\n// \t\t\t\t.then((response) => {\n\t\t\t\t\t\n// \t\t\t\t\tindividualStocks.push({\"stock\": stockShares[i][\"ticker\"], \"value\": stockShares[i][\"shares\"]*response.data[0][\"price\"]});\n// \t\t\t\t\ttotalOverallValue+=stockShares[i][\"shares\"]*response.data[0][\"price\"];\n// \t\t\t\t})\n// \t\t\t\t.catch(function (error){\n// \t\t\t\t\tsetIsValidStockTicker(false);\n// \t\t\t\t});\n// \t\t}\n// \t\tconsole.log(totalOverallValue);\n// \t\t//now we have [{stock:AAPL, value 50}, {stock:MSFT, value 50}]\n// \t\tfor(let i=0 ;i<etfs.length;i++){\n// \t\t\tawait axios.get(`https://fmpcloud.io/api/v3/etf-holder/${etfs[i][\"etf\"]}?apikey=863b5080b597b86a6bfab2088844d00a`)\n// \t\t\t.then((response) => {\n// \t\t\t\tfor (let j=0;j<response.data.length;j++){\n// \t\t\t\t\tstocks[response.data[j][\"asset\"]] = stocks[response.data[j][\"asset\"]] ? [((response.data[j][\"weightPercentage\"]/100)*etfs[i][\"value\"])/totalOverallValue + stocks[response.data[j][\"asset\"]],(((response.data[j][\"weightPercentage\"]/100)*etfs[i][\"value\"])/totalOverallValue + stocks[response.data[j][\"asset\"]])*totalOverallValue] : [((response.data[j][\"weightPercentage\"]/100)*etfs[i][\"value\"])/totalOverallValue,(((response.data[j][\"weightPercentage\"]/100)*etfs[i][\"value\"])/totalOverallValue)*totalOverallValue];\n// \t\t\t\t}\n// \t\t\t})\n// \t\t\t.catch(function (error){\n// \t\t\t\tsetIsValidETFTicker(false);\n// \t\t\t});;       \n// \t\t}\n\t  \n// \t\tfor (let i=0;i<individualStocks.length;i++){\n// \t\t\tstocks[individualStocks[i][\"stock\"]] = stocks[individualStocks[i][\"stock\"]] ? [individualStocks[i][\"value\"]/totalOverallValue + stocks[individualStocks[i][\"stock\"]],(individualStocks[i][\"value\"]/totalOverallValue + stocks[individualStocks[i][\"stock\"]])*totalOverallValue]: [individualStocks[i][\"value\"]/totalOverallValue,(individualStocks[i][\"value\"]/totalOverallValue)*totalOverallValue];\n// \t\t}\n// \t\tconsole.log(stocks)\n\t\t\n// \t\treturn stocks;\n\t\t\n// \t};\n\t\n\t\n\t\n// \tconst [formValues, setFormValues] = useState([{ \"type\": \"ETF\", \"ETFStock\" : \"\", \"value\":\"Shares\", \"ValueShare\":\"\"}])\n// \tfunction createData(id,ticker, percent, totalVal) {\n// \t\treturn {\n// \t\t  id,\n// \t\t  ticker,\n// \t\t  percent,\n// \t\t  totalVal,\n// \t\t};\n// \t  }\n//     let handleChange = (i, e) => {\n//         let newFormValues = [...formValues];\n//         newFormValues[i][e.target.name] = e.target.value;\n// \t\tsetFormValues(newFormValues);\n// \t\t// setEtfStockType(newFormValues[i][\"type\"]);\n// \t\t// setUnit(newFormValues[i][\"value\"])\n// \t  }\n\t\n    \n//     let addFormFields = () => {\n// \t\tsetFormValues([...formValues, { \"type\": \"ETF\", \"ETFStock\" : \"\", \"value\":\"Shares\", \"ValueShare\":\"\"}])\n// \t\tsetIsNumber(true);\n// \t\tsetIsValidStockTicker(true);\n// \t\tsetIsValidETFTicker(true);\n// \t\tsetEmpty(false);\n//       }\n    \n//     let removeFormFields = (i) => {\n//         let newFormValues = [...formValues];\n//         newFormValues.splice(i, 1);\n//         setFormValues(newFormValues)\n// \t}\n// \tfunction isNumeric(value) {\n// \t\treturn /^-?\\d+$/.test(value);\n// \t}\n// \tconst [triedSubmit, setTriedSubmit] = useState(false);\n// \tconst [empty, setEmpty] = useState(false);\n// \tconst [isNumber, setIsNumber] = useState(true);\n//     let handleSubmit = (event) => {\n// \t\tsetIsNumber(true);\n// \t\tsetIsValidStockTicker(true);\n// \t\tsetIsValidETFTicker(true);\n// \t\tsetEmpty(false);\n// \t\tevent.preventDefault();\n// \t\tsetTriedSubmit(true);\n// \t\tlet getOut=false;\n// \t\tformValues.forEach(function (item, index) {\n// \t\t\tconsole.log(typeof(item[\"ValueShare\"]))\n// \t\t\tif(item[\"ETFStock\"]===\"\" || item[\"ValueShare\"]===\"\"){\n// \t\t\t\tsetEmpty(true);\n// \t\t\t\tgetOut=true;\n// \t\t\t\treturn;\n// \t\t\t}\n// \t\t\tif(isNumeric(item[\"ValueShare\"])===false){\n// \t\t\t\tconsole.log(\"e\")\n// \t\t\t\tsetIsNumber(false);\n// \t\t\t\tgetOut=true;\n// \t\t\t\treturn;\n// \t\t\t}\n\t\t\t\n// \t\t});\n// \t\tif(getOut===false){\n// \t\t\tlet etfShares=[];\n// \t\t\tlet etfValues=[];\n// \t\t\tlet stockShares=[];\n// \t\t\tlet stockValues=[];\n// \t\t\tfor (let i=0;i<formValues.length;i++){\n// \t\t\t\tif(formValues[i][\"type\"]===\"ETF\" && formValues[i][\"value\"]===\"Shares\"){\n// \t\t\t\t\tetfShares.push({\"ticker\":formValues[i][\"ETFStock\"], \"shares\":parseFloat(formValues[i][\"ValueShare\"])});\n// \t\t\t\t}\n// \t\t\t\telse if(formValues[i][\"type\"]===\"ETF\" && formValues[i][\"value\"]===\"$ Value\"){\n// \t\t\t\t\tetfValues.push({\"ticker\":formValues[i][\"ETFStock\"], \"value\":parseFloat(formValues[i][\"ValueShare\"])});\n// \t\t\t\t}\n// \t\t\t\telse if(formValues[i][\"type\"]===\"Stock\" && formValues[i][\"value\"]===\"Shares\"){\n// \t\t\t\t\tstockShares.push({\"ticker\":formValues[i][\"ETFStock\"], \"shares\":parseFloat(formValues[i][\"ValueShare\"])});\n// \t\t\t\t}\n// \t\t\t\telse if(formValues[i][\"type\"]===\"Stock\" && formValues[i][\"value\"]===\"$ Value\"){\n// \t\t\t\t\tstockValues.push({\"ticker\":formValues[i][\"ETFStock\"], \"value\":parseFloat(formValues[i][\"ValueShare\"])});\n// \t\t\t\t}\n// \t\t\t}\n\t\n// \t\t\tlet percentages = sendGetRequest(etfValues, etfShares, stockValues, stockShares);\n\t\t\t\n// \t\t\tpercentages.then(function(result) {\n// \t\t\t\tconsole.log(result);\n// \t\t\t\tlet entries = Object.entries(result);\n\n// \t\t\t\tlet sorted = entries.sort((a, b) => b[1] - a[1]);\n// \t\t\t\tlet newRows=[];\n// \t\t\t\tfor (let i=0;i<sorted.length;i++){\n// \t\t\t\t\tnewRows.push(createData(i,sorted[i][0], sorted[i][1][0],sorted[i][1][1]))\n// \t\t\t\t}\n// \t\t\t\tsetRows(newRows);\n// \t\t\t\tconsole.log(rows)\n\t\t\t\t\n// \t\t\t})\n// \t\t}\n\t\t\n//     }\n\t\n// \tconst classes = useStyles();\n\t\n// \tconst columns = [\n// \t\t{field: \"ticker\", headerName: \"Stock\", width:100},\n// \t\t{field: \"percentage\", headerName: \"Percent of Portfolio\", width: 200},\n// \t\t{filed: \"totalVal\", headerName: \"$ Value\", width:150}\n\n// \t]\n\t\n// \treturn (\n// \t\t<div>\n// \t\t\t<Title>ETF Holdings</Title>\n// \t\t<IDK>\n// \t\t<form  className={classes.root} onSubmit={handleSubmit}>\n//           {formValues.map((element, index) => (\n//             <div className=\"form-inline\" key={index}>\n\t\t\t\n// \t\t\t<FlexBox justifyContent=\"center\" alignItems=\"center\">\n\t\t\t\n// \t\t\t<FlexItem>\n// \t\t\t<FormControl className={classes.formControl}>\n// \t\t\t\t<InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n// \t\t\t\t\tETF or Stock\n// \t\t\t\t</InputLabel>\n// \t\t\t\t\t<Select name=\"type\" onChange={e => handleChange(index, e)} labelId=\"demo-simple-select-placeholder-label-label\"\n// \t\t\tid=\"demo-simple-select-placeholder-label\" displayEmpty className={classes.selectEmpty} value={formValues[index][\"type\"]}>\n// \t\t\t\t\t<MenuItem value=\"ETF\">ETF</MenuItem>\n// \t\t\t\t\t<MenuItem value =\"Stock\">Stock</MenuItem>\n// \t\t\t\t\t</Select>\n// \t\t\t</FormControl>\n//             </FlexItem>\n// \t\t\t<FlexItem>\n//               <TextField style = {{width: 150}}  id=\"outlined-basic\" variant =\"outlined\" type=\"text\" name=\"ETFStock\" value={element.ETFStock || \"\"} onChange={e => handleChange(index, e)} />\n// \t\t\t  </FlexItem>\n// \t\t\t<FlexItem>\n// \t\t\t  <FormControl className={classes.formControl}>\n// \t\t\t<InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n// \t\t\t\tUnit\n// \t\t\t</InputLabel>\n// \t\t\t\t<Select name=\"value\" onChange={e => handleChange(index, e)} labelId=\"demo-simple-select-placeholder-label-label\"\n//           id=\"demo-simple-select-placeholder-label\" displayEmpty className={classes.selectEmpty} value={formValues[index][\"value\"]}>\n\t\t\n// \t\t\t\t<MenuItem value=\"Shares\">Shares</MenuItem>\n// \t\t\t\t<MenuItem value =\"$ Value\">$ Value</MenuItem>\n// \t\t\t\t</Select>\n// \t\t\t</FormControl>\n// \t\t\t</FlexItem>\n// \t\t\t<FlexItem>\n// \t\t\t\t<LastText>\n// \t\t\t\t<TextField style = {{width: 150}} id=\"outlined-basic\" variant =\"outlined\" type=\"text\" name=\"ValueShare\" value={element.ValueShare || \"\"} onChange={e => handleChange(index, e)} />\n// \t\t\t\t</LastText>\n// \t\t\t\t</FlexItem>\n\t\t\t\t\n// \t\t\t  {\n// \t\t\t\tindex>0 ? \n// \t\t\t\t<FlexItem>\n// \t\t\t\t<Button variant=\"contained\" type=\"button\"  className=\"button remove\" onClick={() => removeFormFields(index)}>Remove</Button>\n//                 </FlexItem>\n// \t\t\t\t: <FlexItem><Button variant=\"contained\" disabled type=\"button\"  className=\"button remove\" onClick={() => removeFormFields(index)}>Remove</Button></FlexItem>\n//               }\n// \t\t\t  </FlexBox>\n//             </div>\n//           ))}\n\t\t  \n\t\t  \n\t\t  \n\t\t  \n// \t\t  {triedSubmit && empty? <ErrorLabel>All inputs must be filled</ErrorLabel>:  triedSubmit && isNumber===false ? <ErrorLabel>Value input must be a valid number</ErrorLabel>: triedSubmit && isValidStockTicker===false? <ErrorLabel>Ensure that it is a valid stock ticker!</ErrorLabel>:triedSubmit && isValidETFTicker===false?<ErrorLabel>Ensure that it is a valid ETF!</ErrorLabel>:\"\"}\n          \n\t\t  \n\t\t  \n// \t\t  <div className=\"button-section\">\n// \t\t\t  <TotalButton>\n// \t\t\t  <ButtonStyle>\n// \t\t\t<Button style = {{width: 120}, {height:45}}  variant=\"contained\" color=\"primary\" className=\"button add\" type=\"button\" onClick={() => addFormFields()}>\n// \t\t\t\tAdd\n// \t\t\t</Button>\n// \t\t\t</ButtonStyle>\n// \t\t\t<Button style = {{width: 120}, {height:45}}  variant=\"contained\" color=\"primary\" className=\"button submit\" type=\"submit\">\n// \t\t\t\tSubmit\n// \t\t\t</Button>\n// \t\t\t</TotalButton>\n//           </div>\n\t\t\n//       </form>\n\t  \n// \t  </IDK>\n\n// \t  <div style={{ height: 400, width: '50%' }}>\n//       <DataGrid\n//         rows={rows}\n//         columns={columns}\n//         pageSize={5}\n// \t\trowsPerPageOptions={[5]}\n//       />\n//     </div>\t\n// \t  </div>\n\t  \n//   \t);\n// }\t\t\n\n// export default App;\nimport * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\n\nconst columns = [\n  { field: 'id', headerName: 'ID', width: 70 },\n  { field: 'firstName', headerName: 'First name', width: 130 },\n  { field: 'lastName', headerName: 'Last name', width: 130 },\n  {\n    field: 'age',\n    headerName: 'Age',\n    type: 'number',\n    width: 90,\n  },\n  {\n    field: 'fullName',\n    headerName: 'Full name',\n    description: 'This column has a value getter and is not sortable.',\n    sortable: false,\n    width: 160,\n    valueGetter: (params) =>\n      `${params.row.firstName || ''} ${params.row.lastName || ''}`,\n  },\n];\n\nconst rows = [\n  { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n  { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n  { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n  { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n  { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n  { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n  { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n  { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n  { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n];\n\nexport default function DataTable() {\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        pageSize={5}\n        rowsPerPageOptions={[5]}\n        checkboxSelection\n      />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}