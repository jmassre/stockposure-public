{"ast":null,"code":"var _jsxFileName = \"/Users/joey/Desktop/etf-holdings-site/src/App.js\",\n    _s = $RefreshSig$();\n\nimport InputSection from './InputSection.js';\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios');\n\nfunction App(props) {\n  _s();\n\n  // async function sendGetRequest(etfValues, etfShares, stockValues, stockShares){\n  // \tlet stocks = {};\n  // \tlet etfs = [];\n  // \tlet individualStocks=[];\n  // \tlet totalOverallValue=0;\n  // \tfor (let i=0; i<etfValues.length;i++){\n  // \t\tetfs.push({\"etf\": etfValues[i][\"ticker\"], \"value\": etfValues[i][\"value\"]});\n  // \t\ttotalOverallValue+=etfValues[i][\"value\"];\n  // \t}\n  // \tfor (let i=0; i<etfShares.length;i++){\n  // \t\tawait axios.get(`https://financialmodelingprep.com/api/v3/quote-short/${etfShares[i][\"ticker\"]}?apikey=1a4f4c0ce5cd348fb5a01d33d0e1195a`)\n  // \t\t.then((response) => {\n  // \t\t\tconsole.log(\"H\");\n  // \t\t\tetfs.push({\"etf\": etfShares[i][\"ticker\"], \"value\": etfShares[i][\"shares\"]*response.data[0][\"price\"]});\n  // \t\t\ttotalOverallValue+=etfShares[i][\"shares\"]*response.data[0][\"price\"];\n  // \t\t});\n  // \t}\n  // \t//now we have [{etf:SPY, value: 200}, {etf:SPY, value: 300}]\n  // \tfor (let i=0;i<stockValues.length;i++){\n  // \t\tindividualStocks.push({\"stock\": stockValues[i][\"ticker\"], \"value\":stockValues[i][\"value\"]});\n  // \t\ttotalOverallValue+=stockValues[i][\"value\"];\n  // \t}\n  // \tfor (let i=0;i<stockShares.length;i++){\n  // \t\tawait axios.get(`https://financialmodelingprep.com/api/v3/quote-short/${stockShares[i][\"ticker\"]}?apikey=1a4f4c0ce5cd348fb5a01d33d0e1195a`)\n  // \t\t\t.then((response) => {\n  // \t\t\t\tindividualStocks.push({\"stock\": stockShares[i][\"ticker\"], \"value\": stockShares[i][\"shares\"]*response.data[0][\"price\"]});\n  // \t\t\t\ttotalOverallValue+=stockShares[i][\"shares\"]*response.data[0][\"price\"];\n  // \t\t\t});\n  // \t}\n  // \t//now we have [{stock:AAPL, value 50}, {stock:MSFT, value 50}]\n  // \tfor(let i=0 ;i<etfs.length;i++){\n  // \t\tawait axios.get(`https://fmpcloud.io/api/v3/etf-holder/${etfs[i][\"etf\"]}?apikey=863b5080b597b86a6bfab2088844d00a`)\n  // \t\t.then((response) => {\n  // \t\t\tfor (let j=0;j<response.data.length;j++){\n  // \t\t\t\tstocks[response.data[j][\"asset\"]] = stocks[response.data[j][\"asset\"]] ? ((response.data[j][\"weightPercentage\"]/100)*etfs[i][\"value\"])/totalOverallValue + stocks[response.data[j][\"asset\"]] : ((response.data[j][\"weightPercentage\"]/100)*etfs[i][\"value\"])/totalOverallValue;\n  // \t\t\t}\n  // \t\t});       \n  // \t}\n  // \tfor (let i=0;i<individualStocks.length;i++){\n  // \t\tstocks[individualStocks[i][\"stock\"]] = stocks[individualStocks[i][\"stock\"]] ? individualStocks[i][\"value\"]/totalOverallValue + stocks[individualStocks[i][\"stock\"]]: individualStocks[i][\"value\"]/totalOverallValue;\n  // \t}\n  // \treturn stocks;\n  // };`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````\n  // let percentages = sendGetRequest([{\"ticker\": \"SPY\", \"value\":50}], [{\"ticker\": \"SPY\", \"shares\":1 }], [{\"ticker\": \"AAPL\", \"value\":50}], [{\"ticker\": \"AAPL\", \"shares\":1}]);\n  // percentages.then(function(result) {\n  // console.log(result);\n  // })\n  const [formValues, setFormValues] = useState([{\n    name: \"\",\n    email: \"\"\n  }]);\n\n  let handleChange = (i, e) => {\n    let newFormValues = [...formValues];\n    newFormValues[i][e.target.name] = e.target.value;\n    setFormValues(newFormValues);\n  };\n\n  let addFormFields = () => {\n    setFormValues([...formValues, {\n      name: \"\",\n      email: \"\"\n    }]);\n  };\n\n  let removeFormFields = i => {\n    let newFormValues = [...formValues];\n    newFormValues.splice(i, 1);\n    setFormValues(newFormValues);\n  };\n\n  let handleSubmit = event => {\n    event.preventDefault();\n    alert(JSON.stringify(formValues));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [formValues.map((element, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-inline\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"type\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ETF\",\n          children: \"ETF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Stock\",\n          children: \"Stock\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"ETF/Stock\",\n        value: element.name || \"\",\n        onChange: e => handleChange(index, e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"Value/Share\",\n        value: element.email || \"\",\n        onChange: e => handleChange(index, e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }, this), index > 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"button remove\",\n        onClick: () => removeFormFields(index),\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }, this) : null]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button add\",\n        type: \"button\",\n        onClick: () => addFormFields(),\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button submit\",\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"5K260C4pF2V8TUjqJvT0id/QpkI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/joey/Desktop/etf-holdings-site/src/App.js"],"names":["InputSection","React","useState","useEffect","axios","require","App","props","formValues","setFormValues","name","email","handleChange","i","e","newFormValues","target","value","addFormFields","removeFormFields","splice","handleSubmit","event","preventDefault","alert","JSON","stringify","map","element","index"],"mappings":"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","sourcesContent":["import InputSection from './InputSection.js';\nimport React, { useState, useEffect } from \"react\";\nconst axios = require('axios');\n\nfunction App(props) {\n\t// async function sendGetRequest(etfValues, etfShares, stockValues, stockShares){\n\t// \tlet stocks = {};\n\t// \tlet etfs = [];\n\t// \tlet individualStocks=[];\n\t// \tlet totalOverallValue=0;\n\t// \tfor (let i=0; i<etfValues.length;i++){\n\t// \t\tetfs.push({\"etf\": etfValues[i][\"ticker\"], \"value\": etfValues[i][\"value\"]});\n\t// \t\ttotalOverallValue+=etfValues[i][\"value\"];\n\t// \t}\n\t// \tfor (let i=0; i<etfShares.length;i++){\n\t// \t\tawait axios.get(`https://financialmodelingprep.com/api/v3/quote-short/${etfShares[i][\"ticker\"]}?apikey=1a4f4c0ce5cd348fb5a01d33d0e1195a`)\n\t// \t\t.then((response) => {\n\t// \t\t\tconsole.log(\"H\");\n\t// \t\t\tetfs.push({\"etf\": etfShares[i][\"ticker\"], \"value\": etfShares[i][\"shares\"]*response.data[0][\"price\"]});\n\t// \t\t\ttotalOverallValue+=etfShares[i][\"shares\"]*response.data[0][\"price\"];\n\t// \t\t});\n\t// \t}\n\t  \n\t// \t//now we have [{etf:SPY, value: 200}, {etf:SPY, value: 300}]\n\t// \tfor (let i=0;i<stockValues.length;i++){\n\t// \t\tindividualStocks.push({\"stock\": stockValues[i][\"ticker\"], \"value\":stockValues[i][\"value\"]});\n\t// \t\ttotalOverallValue+=stockValues[i][\"value\"];\n\t// \t}\n\t// \tfor (let i=0;i<stockShares.length;i++){\n\t// \t\tawait axios.get(`https://financialmodelingprep.com/api/v3/quote-short/${stockShares[i][\"ticker\"]}?apikey=1a4f4c0ce5cd348fb5a01d33d0e1195a`)\n\t// \t\t\t.then((response) => {\n\t// \t\t\t\tindividualStocks.push({\"stock\": stockShares[i][\"ticker\"], \"value\": stockShares[i][\"shares\"]*response.data[0][\"price\"]});\n\t// \t\t\t\ttotalOverallValue+=stockShares[i][\"shares\"]*response.data[0][\"price\"];\n\t// \t\t\t});\n\t// \t}\n\n\t// \t//now we have [{stock:AAPL, value 50}, {stock:MSFT, value 50}]\n\t// \tfor(let i=0 ;i<etfs.length;i++){\n\t// \t\tawait axios.get(`https://fmpcloud.io/api/v3/etf-holder/${etfs[i][\"etf\"]}?apikey=863b5080b597b86a6bfab2088844d00a`)\n\t// \t\t.then((response) => {\n\t// \t\t\tfor (let j=0;j<response.data.length;j++){\n\t// \t\t\t\tstocks[response.data[j][\"asset\"]] = stocks[response.data[j][\"asset\"]] ? ((response.data[j][\"weightPercentage\"]/100)*etfs[i][\"value\"])/totalOverallValue + stocks[response.data[j][\"asset\"]] : ((response.data[j][\"weightPercentage\"]/100)*etfs[i][\"value\"])/totalOverallValue;\n\t// \t\t\t}\n\t// \t\t});       \n\t// \t}\n\t  \n\t// \tfor (let i=0;i<individualStocks.length;i++){\n\t// \t\tstocks[individualStocks[i][\"stock\"]] = stocks[individualStocks[i][\"stock\"]] ? individualStocks[i][\"value\"]/totalOverallValue + stocks[individualStocks[i][\"stock\"]]: individualStocks[i][\"value\"]/totalOverallValue;\n\t// \t}\n\t// \treturn stocks;\n\t\t\n\t// };`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````\n\t  \n\t// let percentages = sendGetRequest([{\"ticker\": \"SPY\", \"value\":50}], [{\"ticker\": \"SPY\", \"shares\":1 }], [{\"ticker\": \"AAPL\", \"value\":50}], [{\"ticker\": \"AAPL\", \"shares\":1}]);\n\t\t\n\t// percentages.then(function(result) {\n\t// console.log(result);\n\t// })\n\tconst [formValues, setFormValues] = useState([{ name: \"\", email : \"\"}])\n\n    let handleChange = (i, e) => {\n        let newFormValues = [...formValues];\n        newFormValues[i][e.target.name] = e.target.value;\n        setFormValues(newFormValues);\n      }\n    \n    let addFormFields = () => {\n        setFormValues([...formValues, { name: \"\", email: \"\" }])\n      }\n    \n    let removeFormFields = (i) => {\n        let newFormValues = [...formValues];\n        newFormValues.splice(i, 1);\n        setFormValues(newFormValues)\n    }\n    \n    let handleSubmit = (event) => {\n        event.preventDefault();\n        alert(JSON.stringify(formValues));\n    }\n\t\n\treturn (\n\t\t<form  onSubmit={handleSubmit}>\n          {formValues.map((element, index) => (\n            <div className=\"form-inline\" key={index}>\n            <select name=\"type\">\n                <option value=\"ETF\">ETF</option>\n                <option value=\"Stock\">Stock</option>\n            </select> \n              <input type=\"text\" name=\"ETF/Stock\" value={element.name || \"\"} onChange={e => handleChange(index, e)} />\n              \n              <input type=\"text\" name=\"Value/Share\" value={element.email || \"\"} onChange={e => handleChange(index, e)} />\n              {\n\t\t\t\tindex>0 ? \n                  <button type=\"button\"  className=\"button remove\" onClick={() => removeFormFields(index)}>Remove</button> \n                : null\n              }\n            </div>\n          ))}\n          <div className=\"button-section\">\n              <button className=\"button add\" type=\"button\" onClick={() => addFormFields()}>Add</button>\n              <button className=\"button submit\" type=\"submit\">Submit</button>\n          </div>\n      </form>\n  \t);\n}\t\t\n\nexport default App;"]},"metadata":{},"sourceType":"module"}